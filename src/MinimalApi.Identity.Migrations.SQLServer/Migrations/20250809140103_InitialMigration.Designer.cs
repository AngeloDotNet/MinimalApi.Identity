// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MinimalApi.Identity.Core.Database;

#nullable disable

namespace MinimalApi.Identity.Migrations.SQLServer.Migrations
{
    [DbContext(typeof(MinimalApiAuthDbContext))]
    [Migration("20250809140103_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "2F267733-F53E-498F-B91E-C536BCE4AEA3",
                            Default = true,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "36741E9D-5F55-4994-B9BE-F63F93A81EE0",
                            Default = true,
                            Name = "PowerUser",
                            NormalizedName = "POWERUSER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "4535A9B1-B787-4CA6-ACAD-F2E0DF38AB5B",
                            Default = true,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.AuthPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("PolicyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("PolicyPermissions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuthPolicy");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            IsDefault = true,
                            PolicyDescription = "AuthPolicyRead",
                            PolicyName = "AuthPolicyRead",
                            PolicyPermissions = "[\"AuthPolicy\",\"AuthPolicyRead\"]"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            IsDefault = true,
                            PolicyDescription = "AuthPolicyWrite",
                            PolicyName = "AuthPolicyWrite",
                            PolicyPermissions = "[\"AuthPolicy\",\"AuthPolicyWrite\"]"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            IsDefault = true,
                            PolicyDescription = "ClaimRead",
                            PolicyName = "ClaimRead",
                            PolicyPermissions = "[\"Claim\",\"ClaimRead\"]"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            IsDefault = true,
                            PolicyDescription = "ClaimWrite",
                            PolicyName = "ClaimWrite",
                            PolicyPermissions = "[\"Claim\",\"ClaimWrite\"]"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            IsDefault = true,
                            PolicyDescription = "LicenzaRead",
                            PolicyName = "LicenzaRead",
                            PolicyPermissions = "[\"Licenza\",\"LicenzaRead\"]"
                        },
                        new
                        {
                            Id = 6,
                            IsActive = true,
                            IsDefault = true,
                            PolicyDescription = "LicenzaWrite",
                            PolicyName = "LicenzaWrite",
                            PolicyPermissions = "[\"Licenza\",\"LicenzaWrite\"]"
                        },
                        new
                        {
                            Id = 7,
                            IsActive = true,
                            IsDefault = true,
                            PolicyDescription = "ModuloRead",
                            PolicyName = "ModuloRead",
                            PolicyPermissions = "[\"Modulo\",\"ModuloRead\"]"
                        },
                        new
                        {
                            Id = 8,
                            IsActive = true,
                            IsDefault = true,
                            PolicyDescription = "ModuloWrite",
                            PolicyName = "ModuloWrite",
                            PolicyPermissions = "[\"Modulo\",\"ModuloWrite\"]"
                        },
                        new
                        {
                            Id = 9,
                            IsActive = true,
                            IsDefault = true,
                            PolicyDescription = "ProfiloRead",
                            PolicyName = "ProfiloRead",
                            PolicyPermissions = "[\"Profilo\",\"ProfiloRead\"]"
                        },
                        new
                        {
                            Id = 10,
                            IsActive = true,
                            IsDefault = true,
                            PolicyDescription = "ProfiloWrite",
                            PolicyName = "ProfiloWrite",
                            PolicyPermissions = "[\"Profilo\",\"ProfiloWrite\"]"
                        },
                        new
                        {
                            Id = 11,
                            IsActive = true,
                            IsDefault = true,
                            PolicyDescription = "RuoloRead",
                            PolicyName = "RuoloRead",
                            PolicyPermissions = "[\"Ruolo\",\"RuoloRead\"]"
                        },
                        new
                        {
                            Id = 12,
                            IsActive = true,
                            IsDefault = true,
                            PolicyDescription = "RuoloWrite",
                            PolicyName = "RuoloWrite",
                            PolicyPermissions = "[\"Ruolo\",\"RuoloWrite\"]"
                        });
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.ClaimType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClaimType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Default = true,
                            Type = "Permission",
                            Value = "AuthPolicy"
                        },
                        new
                        {
                            Id = 2,
                            Default = true,
                            Type = "Permission",
                            Value = "AuthPolicyRead"
                        },
                        new
                        {
                            Id = 3,
                            Default = true,
                            Type = "Permission",
                            Value = "AuthPolicyWrite"
                        },
                        new
                        {
                            Id = 4,
                            Default = true,
                            Type = "Permission",
                            Value = "Claim"
                        },
                        new
                        {
                            Id = 5,
                            Default = true,
                            Type = "Permission",
                            Value = "ClaimRead"
                        },
                        new
                        {
                            Id = 6,
                            Default = true,
                            Type = "Permission",
                            Value = "ClaimWrite"
                        },
                        new
                        {
                            Id = 7,
                            Default = true,
                            Type = "Permission",
                            Value = "Licenza"
                        },
                        new
                        {
                            Id = 8,
                            Default = true,
                            Type = "Permission",
                            Value = "LicenzaRead"
                        },
                        new
                        {
                            Id = 9,
                            Default = true,
                            Type = "Permission",
                            Value = "LicenzaWrite"
                        },
                        new
                        {
                            Id = 10,
                            Default = true,
                            Type = "Permission",
                            Value = "Modulo"
                        },
                        new
                        {
                            Id = 11,
                            Default = true,
                            Type = "Permission",
                            Value = "ModuloRead"
                        },
                        new
                        {
                            Id = 12,
                            Default = true,
                            Type = "Permission",
                            Value = "ModuloWrite"
                        },
                        new
                        {
                            Id = 13,
                            Default = true,
                            Type = "Permission",
                            Value = "Profilo"
                        },
                        new
                        {
                            Id = 14,
                            Default = true,
                            Type = "Permission",
                            Value = "ProfiloRead"
                        },
                        new
                        {
                            Id = 15,
                            Default = true,
                            Type = "Permission",
                            Value = "ProfiloWrite"
                        },
                        new
                        {
                            Id = 16,
                            Default = true,
                            Type = "Permission",
                            Value = "Ruolo"
                        },
                        new
                        {
                            Id = 17,
                            Default = true,
                            Type = "Permission",
                            Value = "RuoloRead"
                        },
                        new
                        {
                            Id = 18,
                            Default = true,
                            Type = "Permission",
                            Value = "RuoloWrite"
                        });
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.EmailSending", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailSendingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sent")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailSending");
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("License");
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.UserLicense", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("LicenseId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "LicenseId");

                    b.HasIndex("LicenseId");

                    b.ToTable("UserLicense");
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.UserModule", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ModuleId");

                    b.HasIndex("ModuleId");

                    b.ToTable("UserModule");
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("LastDateChangePassword")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("MinimalApi.Identity.Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MinimalApi.Identity.Core.Entities.ApplicationUser", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("MinimalApi.Identity.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MinimalApi.Identity.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MinimalApi.Identity.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("MinimalApi.Identity.Core.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinimalApi.Identity.Core.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.UserLicense", b =>
                {
                    b.HasOne("MinimalApi.Identity.Core.Entities.License", "License")
                        .WithMany("UserLicenses")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinimalApi.Identity.Core.Entities.ApplicationUser", "User")
                        .WithMany("UserLicenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("License");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.UserModule", b =>
                {
                    b.HasOne("MinimalApi.Identity.Core.Entities.Module", "Module")
                        .WithMany("UserModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinimalApi.Identity.Core.Entities.ApplicationUser", "User")
                        .WithMany("UserModules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.UserProfile", b =>
                {
                    b.HasOne("MinimalApi.Identity.Core.Entities.ApplicationUser", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("MinimalApi.Identity.Core.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.ApplicationUser", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserLicenses");

                    b.Navigation("UserModules");

                    b.Navigation("UserProfile")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.License", b =>
                {
                    b.Navigation("UserLicenses");
                });

            modelBuilder.Entity("MinimalApi.Identity.Core.Entities.Module", b =>
                {
                    b.Navigation("UserModules");
                });
#pragma warning restore 612, 618
        }
    }
}
